select * from EMP;
-- LA MEJOR PRAXIS ES UTLIZAR EL NOMBRE DE LOS CAMPO DE LA TABLA
-- CONTROL + ENTER, EJECUTA LA LINEA EN LA CUAL ESTAMOS POSICIONADOS
select APELLIDO, OFICIO, SALARIO from EMP;
-- LA ORDENACION DE DATOS SIEMPRE ES ASCENDENTE
select * from EMP order by APELLIDO ASC;
-- ORDENACION DESCENDENTE DESC
select * from EMP order by APELLIDO DESC;
-- ORDENAR POR MAS DE UN CAMPO
select * from EMP order by DEPT_NO, OFICIO;
-- FILTRADO DE REGISTROS
-- OPERADORES DE COMPARACION
/* 
= igual
>= mayor o igual
<= menor o igual
> mayor
< menor
<> distinto
*/
-- Oracle, por defecto, difrenecia entre mayusculas y minusculas
-- en sus textos (string/varchar)
-- TODO LO QUE NO SE UN NUMERO SE ESCRIBE ENTRE COMMILAS SIMPLES '...'
-- PARA FLITAR SE UTLIZA LA PALABRA where Y SE ESCRIBE SOLAMENTE UNA VEZ DESPUES
-- DEL FROM
-- MOSTRAR TODOS LOS EMPLEADOS DEL DEPARTAMENTO 10
select * from EMP where DEPT_NO = 10;
-- mostrar todos los empleados cuyo oficio sea DIRECTOR
select * from EMP where OFICIO = 'DIRECTOR';
-- mostrar todos los empleados cuyo oficio sea DIFERENTE A DIRECTOR
select * from EMP where OFICIO <> 'DIRECTOR';
select * from EMP where OFICIO != 'DIRECTOR';
-- OPERADORES RELACIONALES
-- NOS PERMITEN REALIZAR MAS DE UNA PREGUNTA EN UNA CONSULTA
/*
OR ----> MUESTRA LOS DATOS DE CADA FILTRO
AND ---> TODOS LOS FILTROS DEBEN CUMPLIRSE
NOT ---> NEGACION DE UNA CONDICION (EVITARLO SIEMPRE)
*/
-- MOSTRAR LOS EMPLEADOS DEL DEPARTamento 10 y que tengan oficio director
select * from EMP where DEPT_NO = 10 AND OFICIO = 'DIRECTOR';
select * from EMP where DEPT_NO = 10 OR OFICIO = 'DIRECTOR';
-- Mostrar los valores del departamento 10 y el departamento 20
select * from EMP where DEPT_NO = 10 OR DEPT_NO = 20;
-- TENEMOS OTROS OPERADORES ADEMAS DE LOS STANDARD
-- BETWEEN MUESTRA LOS DATOS ENTRE UN RANGO INCLUSIVE
-- MOSTRAR LOS EMPLEADOS CUYOS SALARIO ESTE ENTRE 251000 Y 39000
select * from EMP where SALARIO between 251000 AND 390000 order by SALARIO;
-- PODEMOS HACER LA MISMA CONSULTA CON OPERADORES Y ES MAS EFICIENTE
select * from EMP where SALARIO >= 251000 AND SALARIO <=390000 order by SALARIO;
-- LA NEGACDION ES ALGO DE LO QUE DEBEMOS HUIR
-- MOSTRAR LOS EMPLEADOS QUE NO SEAN DIRECTOR
select * from EMP where NOT OFICIO = 'DIRECTOR';
-- PODEMOS REALIZAR LA MISMA CONSULTA CON OPERADOR
select * from EMP where OFICIO <> 'DIRECTOR';
-- EXISTE UN OPERADOR PARA BUSCAR COINCIDENCIAS EN TEXTOS
-- NOS PERMITE , MEDIANTE CARACTERES ESPECIALES HACER FILTROS EN TEXTOS
/*
% busca cualquier caracter y longitud
_ Un caracter cualquier 
? Un caracter nuemrico
*/
-- MOSTRAR LOS EMPLEADOS CUYO APELLIDO COMIENZA EN s
select * from EMP where APELLIDO LIKE '&s';
-- MOSTRAR LOS EMPLEADOS CUYO APELLIDO COMIENZA EN s Y FINALIZA CON a
select * from EMP where APELLIDO LIKE 's&a';
-- MOSTRAR TODOS LOS EMPLEADOS CUYO APELLIDO SE DE 4 LETRAS
select * from EMP where APELLIDO LIKE '____';
-- EXISTE OTRO OPERADOR PARA BUSCAR COINCIDENCIAS DE IGUALDAD EN UN MISMO
-- CAMPO: IN(valor1, valor2)
-- MOSTRAR LOS EMPLEADOS DEL DEPARTAMENTO 10, 20 Y 30, 55, 65, 77
select * from EMP where DEPT_NO = 10 OR DEPT_NO = 20;
OR DEPT_NO = 30 OR DEPT_NO = 55 OR DEPT_NO = 65 OR DEPT_NO = 77;
select * from EMP where DEPT_NO IN (10,20,30,55,65,77);
--MOSTRAR TODOS LOS EMPLEADOS QUE NO ESTEN EN EL DEPARTAMENTO 10 Y 20
select * from EMP where not DEPT_NO in (10,20); --NEGACION DE UNA CONDICION
select * from EMP where DEPT_NO not in (10,20); --NEGACION      
-- UN CAMPO CALCULADO ES UNA HERRAMIENTA EN UNA CONSULTA
-- SIRVE PARA GENERAR CAMPOS QUE NO EXISTAN EN LA TABLA Y LOS PODEMOS CALCULAR
-- MOSTRAR EL APELLIDO, EL SALARIO, COMISION Y 
-- EL SALARIO TOTAL (SALARIO + COMSION)
-- de todos los empleados cuyo salario mas comision sea mayor a 344500
-- UN CAMPO CALCULADO SOLO ES PARA EL CURSOR
select APELLIDO, SALARIO, COMISION, (SALARIO + COMISION ) as TOTAL from EMP
where ( SALARIO + COMISION ) >= 344500;
-- ESTA CONSULTA ESTAMOS GENERANDO UN CURSOR LA CUAL ES LA CONSULTA GENERADA
-- QUEREMOS LA CONSULTA ORIGINAL YORDENAR POR ELLA
select APELLIDO, SALARIO, COMISION, (SALARIO + COMISION ) as TOTAL from EMP
order by TOTAL;
-- CLAUSULA DISTINCT: SE UTILIZA PARA EL SELECT Y LO QUE REALIZA ES
-- ELIMINAR REPETIDOS DE LA CONSULTA
-- MOSTRAR EL OFICIO DE LOS EMPLEADOS
select distinct OFICIO from EMP;
-- MOSTRAR LOS DIFERENTES OFICIOS , APALLIDOS DE LOS EMPLEADOS, UN SIN SENTIDO...
select distinct OFICIO, APELLIDO from EMP;
--
--
-- PRACTICA
--
--
-- TABLA:ENFERMOS NACIDOS ANTES 11/01/1970 
SELECT * FROM ENFERMO;
--
-- DESCRIPCION DE LOS CAMPOS DE LA TABLA
DESC ENFERMO;
--
select INSCRIPCION, APELLIDO, DIRECCION, FECHA_NAC, SEXO, NSS from ENFERMO
where FECHA_NAC <= '11/01/1970';
--
-- TABLA:ENFERMOS Nacidos antes del 1/1/1970 ordenados por número de inscripción.
select INSCRIPCION, APELLIDO, DIRECCION, FECHA_NAC, SEXO, NSS from ENFERMO
where FECHA_NAC <= '01/01/1970' order by INSCRIPCION;
--
-- Listar todos los datos de la plantilla del hospital del turno de mañana
select  distinct turno from PLANTILLA;
select HOSPITAL_COD, SALA_COD, EMPLEADO_NO, APELLIDO, FUNCION, TURNO,
SALARIO FROM PLANTILLA
WHERE TURNO = 'M';
--
--Idem del turno de noche. 
select HOSPITAL_COD, SALA_COD, EMPLEADO_NO, APELLIDO, FUNCION, TURNO,
SALARIO FROM PLANTILLA
WHERE TURNO = 'N';
--
--Listar los doctores que su salario anual supere 3.000.000 €. 
--
select HOSPITAL_COD, DOCTOR_NO, APELLIDO, ESPECIALIDAD, SALARIO, (SALARIO * 12)AS SALARIOANUAL   
FROM DOCTOR 
WHERE (SALARIO * 12) > 3000000;
-- 
--Visualizar los empleados de la plantilla del turno de mañana que tengan un salario entre 2.000.000 y 2.250.000. 
SELECT SALARIO  FROM PLANTILLA WHERE TURNO = 'M';
select HOSPITAL_COD, SALA_COD, EMPLEADO_NO, APELLIDO, FUNCION, TURNO,
SALARIO FROM PLANTILLA
WHERE TURNO = 'M' AND 
SALARIO >= 200000 AND SALARIO <= 225000;
--
--Visualizar los empleados de la tabla emp que no se dieron de alta entre el 01/01/1980 y el 12/12/1982. 
SELECT distinct FECHA_ALT FROM EMP;
select EMP_NO, APELLIDO, OFICIO, DIR, FECHA_ALT, SALARIO, COMISION, DEPT_NO from EMP
WHERE FECHA_ALT >= '01/01/1980' AND FECHA_ALT <= '12/12/1982';
--
--Mostrar los nombres de los departamentos situados en Madrid o en Barcelona. 
SELECT LOC FROM DEPT;
select DEPT_NO, DNOMBRE, LOC FROM DEPT
WHERE LOC IN ('MADRID','BARCELONA');
--
--
--CONSULTAS DE AGRUPACION
--
--
-- ESTE TIPO DE CONSULTAS NOS PERMITEN MOSTRAR ALGUN RESUMEN
-- SOBRE UN GRUPO DETERMINADO DE DATOS
-- UTILIZAN FUNCIONES DE AGRUPACION PARA CONSEGUIR EL RESUMEN
-- LAS FUNCIONES DEBEN TENER ALIAS
-- COUNT(*): CUENTA EL NUMERO DE REGISTROS INCLUYENDO NULOS
-- COUNT(CAMPO): CUENTA EL NUMERO DE REGISTROS SIN NULOS
-- SUM(NUMERO): SUMA EL TOTAL DE UN CAMPO NUMERO
-- AVG(NUMERO): RECUPERA LA MEDIA DE UN CASMPO NUMERICO
-- MAX(CAMPO): DEVUELVE EL MAXIMO VALOR DE UN CAMPO
-- MIN(NUMERO): DEVUELVE EL MINIMO VALOR DE UN CAMPO 
-- MOSTRAR EL NUMERO DE REGISTRO DE LA TABLA DOCTOR
--
select count(*) AS NUMERO_DOCTORES from DOCTOR; 
SELECT COUNT(APELLIDO) AS NUMERO_DOCTORES from DOCTOR;
--
-- SE PUEDEN COMBINAS VARIAS FUNCIONES
-- QUEREMOS EL NUMERO DE DOCTORES CON EL MAXIMO SALARIO
select count(*) as DOCTORES, MAX(salario) as MAXIMO from DOCTOR;
-- LOS CAMPOS RESULTANTES DE LAS FUNCIONES PODEMOS AGRUPARLOS POR
-- ALGUN CAMPO/S DE LA TABLA
-- CUANDO QUEREMOS AGRUPAR UTILIZAMOS  group by DESPUES DEL from
-- TRUCO: DEBEMOS AGRUPAR POR CADA CAMPO QUE NO SEA UNA FUNCION
-- MOSTRAR CUANTOS DOCTORES EXISTEN POR CADA ESPECIALIDAD
select count(*)as DOCTORES, ESPECIALIDAD
from DOCTOR
group by ESPECIALIDAD; 
--
-- MOSTRAR NUMERO DE PERSONAS Y MAXIMO SALARIO DE LOS EMPLEADOS
-- POR CADA DEPARTAMENTO OFICIO
select count(*)as PERSONAS, max(SALARIO) AS MAXIMO_SALARIO, DEPT_NO, OFICIO
FROM EMP
group by DEPT_NO, OFICIO;

--FILTRANDO EN CONSULTAS DE AGRUPACION
-- TENEMOS DOS POSIBILIDADES
-- WHERE: ANTES DEL GROUP BY
-- HAVING: DESPUES DEL GROUP BY
-- MOSTRAR CUEANTO SEMPLEADOS TENEMOS POR CADA OFICIO
-- QUE COBREN MAS DE 200000
-- HAVING FILTRADO EN EL SELECT (CONJUNTO)
-- WHERE FLITRADOR POR CAMPOS DE LA TABLA 
SELECT COUNT(*) AS EMPLEADOS, OFICIO
FROM EMP
WHERE SALARIO > 200000
group by OFICIO;
--
--MUCHOS REGISTROS
--
SELECT COUNT(*) AS EMPLEADOS, OFICIO
FROM EMP
WHERE OFICIO IN ('ANALISTA','VENDEDOR')
group by OFICIO;
--
SELECT COUNT(*) AS EMPLEADOS, OFICIO
FROM EMP
WHERE OFICIO IN ('ANALISTA','VENDEDOR')
group by OFICIO;
--
SELECT COUNT(*) AS EMPLEADOS, OFICIO
FROM EMP
group by OFICIO
having count(*) > 2;
--
--
-- EJERCICIOS DIA 03
-- CONSULTAS DE AGRUPACION

--TABLA EMPRESA
--EMP_NO
--APELLIDO
--OFICIO
--DIR
--FECHA_ALT
--SALARIO
--COMISION
--DEPT_NO
--
-- Encontrar el salario más alto, mas bajo y la diferencia entre ambos 
-- de todos los empleados con oficio EMPLEADO.
select max(SALARIO) as SALMAXIMO, min(SALARIO),
(max(SALARIO) - min(SALARIO)) as DIFASALARIO, OFICIO 
FROM EMP
GROUP BY OFICIO 
HAVING OFICIO = 'EMPLEADO' ;
--
--Visualizar el número de personas que realizan cada oficio 
-- cada departamento ordenado por departamento. 
select OFICIO, DEPT_NO, COUNT(*) AS NUMPERSONA
from EMP
GROUP BY OFICIO, DEPT_NO
order by DEPT_NO;
--
--
--Buscar aquellos departamentos con cuatro o más personas trabajando. 
--
select COUNT(*) AS PERSONAS, DEPT_NO
from EMP
GROUP BY DEPT_NO
HAVING COUNT(DEPT_NO) >= 4; 
--
--Visualizar el número de enfermeros, enfermeras e interinos que
--hay en la plantilla, ordenados por la función. 
SELECT * 
FROM PLANTILLA;
SELECT FUNCION, COUNT(*) as no_empleados   
FROM PLANTILLA
group by FUNCION
having FUNCION IN('ENFERMERO','ENFERMERA','INTERINO');
--
--Visualizar departamentos, oficios y número de personas, para aquellos
--departamentos que tengan dos o más personas trabajando en el mismo oficio. 
SELECT DEPT_NO, OFICIO, COUNT( *) AS PERSONASO
from EMP
GROUP BY DEPT_NO, OFICIO
HAVING COUNT(DEPT_NO) >= 2;
--
--Calcular el valor medio de las camas que existen para cada nombre de sala.
--Indicar el nombre de cada sala y el número de cada una de ellas. 
--  
select AVG(NUM_CAMA), COUNT(*) AS SALACOD, NOMBRE
from SALA
GROUP BY NOMBRE; 
--
--11
--
SELECT FUNCION, COUNT(*) AS PERSONAS, AVG(SALARIO) AS MEDIA
FROM PLANTILLA
WHERE SALA_COD = 6
GROUP BY FUNCION;
--
--13
--
SELECT COUNT(*) AS ENFERMOS, SEXO
FROM ENFERMO
GROUP BY SEXO;
--
--15
--
SELECT COUNT(*) AS NUMERO_SALAS, HOSPITAL_COD
FROM SALA
GROUP BY HOSPITAL_COD;
--
--16
--
SELECT COUNT(*) AS ENFERMERAS, SALA_COD
FROM PLANTILLA
WHERE FUNCION = 'ENFERMERA'
GROUP BY SALA_COD;


--CONSULTAS DE COMBINACION
--NOS PERMITEN MOSTRAR DATOS DE VARIAS TABLAS QUE
--DEBEN ESTAR RELACIONADAS ENTRE SI MEDIANTE ALGUNA CLAVE
--1) NECESITAMOS CAMPO/S RELACION ENTRE TABLAS
--2) DEBEMOS PONER EL MOMBRE DE CADA TABLA Y CADA CAMPO EN LA CONSULTA
--SYNTAXIS:
select tabla1.campo1, tabla1.campo2,
tabla2.campo1, tabla2.campo2
from tabla1
inner join tabla2
on tabla1.campo_relacion = tabla2.campo_relacion;
--
--MOSTRAR EL APELLIDO, EL OFICIO DE EMPLEADOS JUNTO A
--SU NOMBRE DE DEPARTAMENTO Y LOCALIDAD
--
select EMP.APELLIDO, EMP.OFICIO, DEPT.DNOMBRE, DEPT.LOC
from EMP
inner join DEPT
on EMP.DEPT_NO = DEPT.DEPT_NO;
--
--MOSTRAR SOLO LOS DE MADRID
--
select EMP.APELLIDO, EMP.OFICIO, DEPT.DNOMBRE, DEPT.LOC
from EMP
inner join DEPT
on EMP.DEPT_NO = DEPT.DEPT_NO
WHERE DEPT.LOC = 'MADRID';
--
--MOSTRAR SOLO LOS DE MADRID
--
select EMP.APELLIDO, EMP.OFICIO, DEPT.DNOMBRE, DEPT.LOC
from EMP
inner join DEPT
on EMP.DEPT_NO = DEPT.DEPT_NO
WHERE DEPT.LOC = 'MADRID';

DESC DEPT;

--PODEMOS INCLUIR ALIAS A LOS NOMBRES DE LAS TABLAS
--PARA LLAMARLAS ASI A LO LARGO DE LA CONSULTA
--ES UTIL CUANDO TENEMOS NOMBRES MUY LARGOSCREATE FUNCTION function_name
--CUANDO PONEMOS ALIAS, LA TABLASELLAMARAASI PARA TODA LA CONSULTA
--  
  select e.APELLIDO, e.OFICIO, d.DNOMBRE, d.LOC
from EMP e
inner join DEPT d
on e.DEPT_NO = d.DEPT_NO ORDER BY d.LOC;
--  
--          
--      
--TENEMOS MULTIPLES TIPOS DE JOIN EN LAS BASES DE DATOS
--INNER: COMBINA LOS RESULTADOS DE LAS DOS TABLAS
--LEFT: COMBINA LAS DOS TABLAS Y TAMBIEN LA TABLA DE LA IZQUIERDA
--RIGHT: COMBINA LAS DOS TABLAS Y FUERZA LA TABLA DERECHA
--FULL: COMBINA LAS DOS TABLAS Y FUERZA LAS DOS TABLAS
--CROSS: PRODUCTO CARTESIANO, COMBINARCADADATO DE UNA TABLA CON LOS OTROS DATOS DE LA TABLA
--
SELECT DISTINCT DEPT_NO FROM EMP;
SELECT * FROM DEPT;
--
--
--TENEMOS UN DEPARTAMENTO: 40 PRODUCCION,, GRANADA SIN EMPLEADOS
--vamos a crear un nuevo empleado que no tenga departamento
--TENEMOS UN EMPLEADO SIN DEPARTAMENTO EN EL 50
--INSERT INTO emp VALUES('1111', 'sin dept', 'EMPLEADO', 7907, TO_DATE('04-04-1996', 'DD-MM-YYYY'), 169000, 0, 50);
--
select  emp.apellido, dept.dnombre, dept.loc
from emp
inner join dept
on emp.dept_no = dept.dept_no
--
select  emp.apellido, dept.dnombre, dept.loc, emp.emp_no
from emp
left join dept
on emp.dept_no = dept.dept_no;
--
--RIGHT: COMBINA LAS DOS TABLAS Y FUERZA LA TABLA DERECHA
--la tabla de la derecha es despues del join
select  emp.apellido, dept.dnombre, dept.loc, emp.emp_no
from emp
right join dept
on emp.dept_no = dept.dept_no;

--full join
select  emp.apellido, dept.dnombre, dept.loc, emp.emp_no
from emp
full join dept
on emp.dept_no = dept.dept_no;

--cross: productor cartesiano  NO LLEVA ON
select  emp.apellido, dept.dnombre, dept.loc, emp.emp_no
from emp
cross join dept;

rollback;

select avg(salario) as media, hospital_cod
from doctor
group by HOSPITAL_COD;
--
--mostrar la media salarial de los doctores por hospital
--MOSTRANDO EL NOMBRE DEL HOSPITAL
SELECT AVG(DOCTOR.SALARIO) AS MEDIA, HOSPITAL.NOMBRE
FROM DOCTOR
INNER JOIN HOSPITAL
ON DOCTOR.HOSPITAL_COD = HOSPITAL.HOSPITAL_COD
GROUP BY HOSPITAL.NOMBRE;


EMP Y DEPT
SELECT COUNT(EMP.EMP_NO) AS LOCALIDADES,  DEPT.LOC
FROM EMP
RIGHT JOIN DEPT
ON EMP.DEPT_NO = DEPT.DEPT_NO
GROUP BY DEPT.LOC;
--
--
-- PRACTICAS dia 27/03 
--
--
--Seleccionar el apellido, oficio, salario, numero de departamento
y su nombre de todos los empleados cuyo salario sea mayor de 300000
--
SELECT EMP.APELLIDO, EMP.OFICIO, EMP.SALARIO, EMP.DEPT_NO, DEPT.DNOMBRE
FROM EMP
INNER JOIN DEPT
ON EMP.DEPT_NO = DEPT.DEPT_NO
WHERE EMP.SALARIO >= 300000;
--
--Mostrar todos los nombres de Hospital con sus nombres de salas correspondientes. 
--
SELECT HOSPITAL.NOMBRE, SALA.NOMBRE
FROM HOSPITAL
INNER JOIN SALA
ON HOSPITAL.HOSPITAL_COD = SALA.HOSPITAL_COD;
--
--Calcular cuántos trabajadores de la empresa hay en cada ciudad. 
SELECT * FROM DEPT;
SELECT COUNT(EMP.EMP_NO) AS TRABAJADORES, DEPT.LOC 
FROM EMP
RIGHT JOIN DEPT
ON EMP.DEPT_NO = DEPT.DEPT_NO
GROUP BY DEPT.LOC;
--
--Visualizar cuantas personas realizan cada oficio en cada departament
o mostrando el nombre del departamento. 
--
SELECT COUNT(EMP.OFICIO) AS PERSONAS, DEPT.DNOMBRE AS DEPTONOMBRE, EMP.OFICIO
FROM EMP
INNER JOIN DEPT
ON EMP.DEPT_NO = DEPT.DEPT_NO
GROUP BY DEPT.DNOMBRE, EMP.OFICIO;
--
--Contar cuantas salas hay en cada hospital, mostrando el nombre 
--de las salas y el nombre del hospital. 
SELECT COUNT(SALA.SALA_COD), HOSPITAL.NOMBRE, SALA.NOMBRE
FROM HOSPITAL
INNER JOIN SALA
ON HOSPITAL.HOSPITAL_COD = SALA.HOSPITAL_COD
GROUP BY HOSPITAL.NOMBRE, SALA.NOMBRE;
--
--Queremos saber cuántos trabajadores se dieron de alta entre el año 1997 y 1998 y en qué departamento. 
--
SELECT COUNT(EMP.FECHA_ALT) AS ALTAS, DEPT.DNOMBRE
FROM EMP 
INNER JOIN DEPT
ON EMP.DEPT_NO = DEPT.DEPT_NO
WHERE EMP.FECHA_ALT >= '01/01/1997' AND EMP.FECHA_ALT <= '31/12/1998'
GROUP BY DEPT.DNOMBRE;
--
--Buscar aquellas ciudades con cuatro o más personas trabajando. 

SELECT COUNT(EMP.EMP_NO) AS TRABAJADORES, DEPT.LOC 
FROM EMP
INNER JOIN DEPT
ON EMP.DEPT_NO = DEPT.DEPT_NO
GROUP BY DEPT.LOC 
HAVING COUNT(EMP.EMP_NO) >= 4;
--
--Calcular la media salarial por ciudad.  Mostrar solamente la media para Madrid y Elche. 
--
SELECT AVG(EMP.SALARIO) AS MEDIASALARIAL, DEPT.LOC AS CIUDAD 
FROM EMP
INNER JOIN DEPT
ON EMP.DEPT_NO = DEPT.DEPT_NO
GROUP BY DEPT.LOC 
HAVING DEPT.LOC IN ('MADRID','SEVILLA'); 
--
--Mostrar los doctores junto con el nombre de hospital en el que ejercen,
--la dirección y el teléfono del mismo. 
SELECT DOCTOR.APELLIDO, HOSPITAL.NOMBRE AS NOMBREHOSPITAL, HOSPITAL.DIRECCION, HOSPITAL.TELEFONO
FROM DOCTOR
INNER JOIN HOSPITAL
ON HOSPITAL.HOSPITAL_COD = DOCTOR.HOSPITAL_COD;
--
--Mostrar los nombres de los hospitales junto con el mejor salario de los empleados de la plantilla de cada hospital. 
--
SELECT MAX(PLANTILLA.SALARIO), HOSPITAL.NOMBRE
FROM HOSPITAL
INNER JOIN PLANTILLA
ON HOSPITAL.HOSPITAL_COD = PLANTILLA.HOSPITAL_COD
GROUP BY HOSPITAL.NOMBRE; 
--
--Visualizar el máximo salario, mínimo salario de los Directores dependiendo 
--de la ciudad en la que trabajen. Indicar el número total de directores por ciudad. 
--
--
SELECT MAX(EMP.SALARIO) AS MAXIMOASALARIO, MIN(EMP.SALARIO) AS MINIMOSALARIO, DEPT.LOC, EMP.OFICIO,
COUNT(EMP.OFICIO)AS DIRECTORES
FROM EMP
RIGHT JOIN DEPT
ON EMP.DEPT_NO = DEPT.DEPT_NO
GROUP BY DEPT.LOC, EMP.OFICIO
HAVING EMP.OFICIO = 'DIRECTOR';
--
--Averiguar la combinación de que salas podría haber por cada uno de los hospitales. 
--
SELECT SALA.NOMBRE AS SALANOMBRE, HOSPITAL.NOMBRE 
FROM HOSPITAL
CROSS JOIN SALA
GROUP BY SALA.NOMBRE, HOSPITAL.NOMBRE;
--
--Visualizar el Apellido, función y turno de los empleados de la plantilla junto con el nombre 
--de la sala y el nombre del hospital con el teléfono. 
--
--PENDIENTE
--
SELECT 
FROM PLANTILLA
INNNER JOIN HOSPITAL
ON EMP.DEPT_NO = DEPT.DEPT_NO
GROUP BY DEPT.LOC, EMP.OFICIO
HAVING EMP.OFICIO = 'DIRECTOR';
 
--SUBCONSULTAS
--SON CONSULTAS QUE NECESITAN DEL RESULTADO DE OTRA CONSULTA PARA PODER SER EJECUTADAS
--NO SO AUTONOMAS
--NO IMPORTA EL NIVEL DE ADIDAMIENTOS DE UBCONSULTAS 
--AUNQUE PUEDAN RALENTIZAR LA RESPUESTA
--GENERAN BLOQUES EN CONSULTAS SELECT, LO QUE TAMBIEN RALENTIZALAS RESPUESTAS
--QUIERO VIZUALIZAR LOS DATOS DEL EMPLEADO QUE MAS GANA EN LA EMPRESA
select max(salario) from EMP;
--SALARIO =650000
SELECT * from EMP WHERE SALADIO=650000;
--SE EJECUTAN LAS DOS CONSULTASA LA VEZ Y, SE ANIDA EL RESULTADO D UNA CONSULTA
--CON LA IGUALDAD DE LA RESPUEST DE OTRA CONSULTA
--LAS SUBCONSULTASMVAN ENTRE PARENTESIS
SELECT * FROM EMP WHERE SALARIO = (SELECT MAX(SALARIO) FROM EMP);
--MOSTRAR LOS EMPLEADOS QUE TIENEN EL MISMO OFICIO QUE EL EMPLEADO GIL
--Y QUE COBREN MENOS QUE JIMENEZ
SELECT * FROM EMP WHERE OFICIO =
(SELECT OFICIO FROM EMP WHERE APELLIDO = 'gil')
AND SALARIO < (SELECT SALARIO FROM EMP WHERE APELLIDO = 'jimenez');
--
--CONSULTAS UNION
--MUESTRAN EN UN MISMO CURSOR UN MISMO CONJUNTO DE RESULTADOS
--ESTAS CONSULTAS SE UTLIZAN COMO CONCEPTO, NO COMO UNA RELACION
--DEBEMOS SEGUIR TRES NORMAS
--1) LA PRIMERA CONSULTA ES LA JEFA
--2) TODAS LAS CONSULTAS DEBEN TENER EL MISMO NUMERO DE COLUMNAS
--3) TODAS LAS COLUMNAS DEBEN TENER EL MISMO TIPO DE DATO ENTRE SI
--EN NUESTRA BASE D DATOS, TENEMOS DATOS DE PERSONAS EN DIFERENTES TABLAS
-- EMP, PLANTILLA Y DOCTOR
SELECT APELLIDO, OFICIO, SALARIO FROM EMP
UNION
SELECT APELLIDO, FUNCION, SALARIO FROM PLANTILLA
UNION
SELECT DNOMBRE, LOC, DEPT_NO FROM DEPT;
--
PODEMOS ORDENAR SIN PROBLEMAS
-- EN LAS CONSULTAS UNION DEBERIAMOS UTILIZAR SIEMPRE UN NUMERANDO
-- PARA UTILIZAR NOMBRE DEBE SER ELO MISMO EN TODAS LAS TABLAS
SELECT APELLIDO, OFICIO, SALARIO FROM EMP
UNION
SELECT APELLIDO, FUNCION, SALARIO FROM PLANTILLA
UNION
SELECT DNOMBRE, LOC, DEPT_NO FROM DEPT
ORDER BY 3;
--TAAMBIENTE ES POSIBLE FILTRAR LOS DATOS DE LA CONSULTA
--SALARIO 300.000
SELECT APELLIDO, OFICIO, SALARIO FROM EMP
UNION
SELECT APELLIDO, FUNCION, SALARIO FROM PLANTILLA
UNION
SELECT DNOMBRE, LOC, DEPT_NO FROM DEPT
WHERE SALARIO < 300000
ORDER BY 1;
--LOS WHERE SON INDEPENDIENTES AL UNION
--UNION ELIMINA LOS RESULTADO REPETIDOS
--PARA REPETIDOS UNION ALL
SELECT APELLIDO, OFICIO, SALARIO FROM EMP
UNION ALL
SELECT APELLIDO, OFICIO, SALARIO FROM EMP;
--SELECT TO SELECT
--ES UNA CONSULTA SOBRE UN CURSOR (SELECT)
--CUANDO HACEMOS UN SELECT, EN REALIDAD ESTAMOS RECUPERANDO DATOS DE UN SELECT YA
--REALIZADO, LOS WHERE Y DEMAS SE HACEN SOBRE EL CURSOR.
--SINTAXIS:
SELECT * FROM
(SELECT TABLA1.CAMPO1 ASALIAS, TABLA1.CAMPO2 FROM TABLA1
UNION
SELECT TABLA2.CAMPO1., TABLA2.CAMPO2 FROM TABLA2) CONSULTA
WHERE CONSULTA.ALIAS = 'VALOR';
--QUEREMOS MOSTRAR TODAS LA PERSONAS DE MIS BASES DE DATOS (EMP, DOCTOR, PLANTILLA) 
--SOLAMENTE QUEREMOS LOS QUE COBREN MENOS DE 300.
SELECT * FROM
(SELECT APELLIDO, OFICIO, SALARIO AS SUELDO FROM EMP
UNION
SELECT APELLIDO, FUNCION, SALARIO FROM PLANTILLA
UNION
SELECT APELLIDO, ESPECIALIDAD, SALARIO FROM DOCTOR) CONSULTA
WHERE CONSULTA.SUELDO < 300000;
--CONSULTA A NIVEL DE FILA
--SON CONSULTA CREADAS PARA DAR FORMATO A LA SALIDA DE LOS DATOS.
--NO MODIFICAN LOS DATOS DE LA TABLA, LOS MUESTRAN DE OTRA FORMA
--SEGUN LO NECESITE
--VAN CON PREGUNTAS EN LA CONSULTA
--SINTAXIS EVALUANDO UN CAMPO:
SELECT CAMPO1, CAMPO2,
CASE CAMPO3
     WHEN 'DATO1 THEN 'VALOR1'
     WHEN 'DATO2' THEN 'VALOR2'
     ELSE 'VALOR3'
END AS ALIAS
FROM TABLA;
--MOSTRAMOS LOS APELLIDOS DE LA PLANTILLA, PERO CON SU TURNO PERO QUE SE VEA BIEN
--(MAÑANA, TARDE, NOCHE)  
SELECT APELLIDO, FUNCION,
CASE TURNO
     WHEN 'T' THEN 'TARDE'
     WHEN 'M' THEN 'MAÑANA'
     ELSE 'NOCHE'
END AS TURNO
FROM PLANTILLA;
--2) EVALUAR POR UN OPERADOR (RANGO, MAYOR O MENOR , DISTINTO)
SELECT CAMPO1, CAMPO2,
CASE
     WHEN CAMPO3 <= 800 THEN RESULATOD1'
     WHEN CAMPO3 > 800  THEN 'RESULTADO2'
     ELSE 'RESULTADO3'
END AS FORMATO 
FROM TABLA;
--
--
SELECT APELLIDO, FUNCION, SALARIO,
CASE
     WHEN SALARIO >= 250000 THEN 'SALARIO CORRECTO'
     WHEN SALARIO >= 150000 AND SALARIO < 250000 THEN 'MEDIA SALARIAL'
     ELSE 'BECARIO'
END AS RANGO_SALARIAL
FROM PLANTILLA;
--MOSTRAR LA SUMA SALARIAL DE LOS EMPLEADOS POR SU NOMBRE DE DEPARTAMENTO
SELECT SUM(EMP.SALARIO) AS SUMASALARIAL, DEPT.DNOMBRE AS DEPARTAMENTO
FROM EMP
INNER JOIN DEPT
ON EMP.DEPT_NO = DEPT.DEPT_NO
GROUP BY DEPT.DNOMBRE;
--MOSTRAR LA SUMA SALARIAL DE LOS DOCTORES POR SU NOMBRE DE HOSPITAL
SELECT SUM(DOCTOR.SALARIO), HOSPITAL.NOMBRE
FROM DOCTOR
INNER JOIN HOSPITAL
ON DOCTOR.HOSPITAL_COD = HOSPITAL.HOSPITAL_COD
GROUP BY HOSPITAL.NOMBRE;
--ME GUSTARIA PODER VER TODO JUNTO EN UNA MISMA CONSULTA
SELECT SUM(DOCTOR.SALARIO), HOSPITAL.NOMBRE
FROM DOCTOR
INNER JOIN HOSPITAL
ON DOCTOR.HOSPITAL_COD = HOSPITAL.HOSPITAL_COD
GROUP BY HOSPITAL.NOMBRE
UNION
SELECT SUM(EMP.SALARIO) AS SUMASALARIAL, DEPT.DNOMBRE AS DEPARTAMENTO
FROM EMP
INNER JOIN DEPT
ON EMP.DEPT_NO = DEPT.DEPT_NO
GROUP BY DEPT.DNOMBRE
ORDER BY 2;
--CONSULTAS DE ACCION
--INSERT
--CADAREGISTRO A INSERTAR ES UNA INSTRUCCION INSERT
--SI QUEREMOS INSERTAR 5 REGISTROS , SON 5 INSERT
--TENEMOS DOS TIPOS DE SINTAXIS
--1)INSERTAR TODOS LOS DATOS DE LA TABLA: DEBEMOS INDICAR TODAS LA COLUMNAS/CAMPOS 
--DE LA TABLA Y EN EL MISMO ORDEN QUE ESTEN EL LA PROPIA TABLA.
-- INSERT IN TO TABLA VALUES (VALOR1, VALOR2, VALOR3, ..... VALORN)
INSERT INTO DEPT VALUES (50, 'ORACLE', 'BERNABEU');
COMMIT;
INSERT INTO DEPT VALUES (51, 'BORRAR', 'BORRAR');
ROLLBACK;
SELECT * FROM DEPT;
--2) INSERTAR ALGUNOS DATOS DE LA TABLA : DEBEMOS INDICAR EL NOMBRE DE LAS COLUMNAS
--QUE DESEAMOS INSERTAR Y LOS VALORES IRAN EN DICHO ORDEN, LA TABLA NO TIENE DANA QUE VER
--INSERT INTO TABLA(CAMPO3, CAMPO7) VALUES (VALOR3, VALOR7);
--INSERTAR UN NUEVO DEPARTAMENTO EN ALMERIA, 
 INSERT INTO DEPT (DEPT_NO, LOC) VALUES (55, 'ALMERIA');
--INSERT INTO DEPT (LOC, DEPT_NO) VALUES ('ALMERIA', 55);
--LAS SUBCONSULTAS SON SUPER UTILES SI ESTAMOS EN LAS CONSULTAS DE ACCION
--NECESITO UN DEPARTAMENTO DE SIDRA GIJON
--GENERAR EL SIGUIENTE NUMERO DISPONIBLE EN LA CONSULTA DE ACCION
SELECT MAX(DEPT_NO) + 1 FROM DEPT;
INSERT INTO DEPT VALUES ((SELECT MAX(DEPT_NO) + 1 FROM DEPT), 'SIDRA', 'GIJON'); 
ROLLBACK;
--DELETE 
--ELIMINA UNA O VARIAS FILAS DE UNA TABLA. 
--SI NO HAY NADA PARA ELIMINAR, NO HACE NADA
--SINTAXIS:
-- DELETE FROM TABLA
--DELETE FROM DEPT WHERE DNOMBRE='ORACLE';
SELECT * FROM DEPT;
ROLLBACK;
DELETE FROM EMP WHERE DEPT_NO =
(SELECT DEPT_NO FROM DEPT WHERE LOC = 'GRANADA'); 
--UPDATE
--UPDATE TABLA CAMPO1=VALOR1, CAMPO2=VALOR2
--ESTA CONSULTA MODIFICA TODAS LAS FILAS DE LA TABLA
--ES CONVENIENTE USAR WHERE 
--MODIFICA EL SALARIO DE LA PLANTILLA DEL TURNO DE NOCHE, TODOS COBRARAN 315.000
UPDATE PLANTILLA SET SALARIO=315000
WHERE TURNO = 'N';
--MODIFICAR LA CIUDAD Y EL NOMBRE DEL DEPARTAMENTO10
--SE LLAMARA CUENTAS Y NOS VAMOS A TOLEDO
UPDATE DEPT SET LOC = 'TOLEDO', DNOMBRE='CUUENTAS'
WHERE DEPT_NO = 10;
--INCREMENTAR EN 1 EL SALARIO DE TODOS LOS EMPLEADOS
UPDATE EMP SET SALARIO = SALARIO +1;
--PONER EL MISMO SALARIO A ARROLLO QUE SALA 
UPDATE EMP SET SALARIO = (SELECT SALARIO FROM EMP WHERE APELLIDO='SALA')
WHERE APELLIDO= 'ARROYO';
--PONER EL SALARIO A LA MITAD DE LOS EMPLEADOS DE BARCELONA
UPDATE EMP SET SALARIO=SALARIO / 2
WHERE DEPT_NO(SELECT DEPT_NO FROM DEPT WHERE LOC = 'BARCELONA');
--Dar de alta con fecha actual al empleado José Escriche Barrera como programador perteneciente al departamento de producción. 
--Tendrá un salario base de 70000 pts/mes y no cobrará comisión.  
INSERT INTO DEPT VALUES (50, 'ORACLE', 'BERNABEU');

